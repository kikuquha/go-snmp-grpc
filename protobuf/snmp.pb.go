// Code generated by protoc-gen-go. DO NOT EDIT.
// source: snmp.proto

package protobuf

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

//
// Asn1Ber Enum Type definitions
type Asn1BER int32

const (
	Asn1BER_EndOfContents     Asn1BER = 0
	Asn1BER_UnknownType       Asn1BER = 0
	Asn1BER_Boolean           Asn1BER = 1
	Asn1BER_Integer           Asn1BER = 2
	Asn1BER_BitString         Asn1BER = 3
	Asn1BER_OctetString       Asn1BER = 4
	Asn1BER_Null              Asn1BER = 5
	Asn1BER_ObjectIdentifier  Asn1BER = 6
	Asn1BER_ObjectDescription Asn1BER = 7
	Asn1BER_IPAddress         Asn1BER = 64
	Asn1BER_Counter32         Asn1BER = 65
	Asn1BER_Gauge32           Asn1BER = 66
	Asn1BER_TimeTicks         Asn1BER = 67
	Asn1BER_Opaque            Asn1BER = 68
	Asn1BER_NsapAddress       Asn1BER = 69
	Asn1BER_Counter64         Asn1BER = 70
	Asn1BER_Uinteger32        Asn1BER = 71
	Asn1BER_OpaqueFloat       Asn1BER = 120
	Asn1BER_OpaqueDouble      Asn1BER = 121
	Asn1BER_NoSuchObject      Asn1BER = 128
	Asn1BER_NoSuchInstance    Asn1BER = 129
	Asn1BER_EndOfMibView      Asn1BER = 130
)

var Asn1BER_name = map[int32]string{
	0: "EndOfContents",
	// Duplicate value: 0: "UnknownType",
	1:   "Boolean",
	2:   "Integer",
	3:   "BitString",
	4:   "OctetString",
	5:   "Null",
	6:   "ObjectIdentifier",
	7:   "ObjectDescription",
	64:  "IPAddress",
	65:  "Counter32",
	66:  "Gauge32",
	67:  "TimeTicks",
	68:  "Opaque",
	69:  "NsapAddress",
	70:  "Counter64",
	71:  "Uinteger32",
	120: "OpaqueFloat",
	121: "OpaqueDouble",
	128: "NoSuchObject",
	129: "NoSuchInstance",
	130: "EndOfMibView",
}

var Asn1BER_value = map[string]int32{
	"EndOfContents":     0,
	"UnknownType":       0,
	"Boolean":           1,
	"Integer":           2,
	"BitString":         3,
	"OctetString":       4,
	"Null":              5,
	"ObjectIdentifier":  6,
	"ObjectDescription": 7,
	"IPAddress":         64,
	"Counter32":         65,
	"Gauge32":           66,
	"TimeTicks":         67,
	"Opaque":            68,
	"NsapAddress":       69,
	"Counter64":         70,
	"Uinteger32":        71,
	"OpaqueFloat":       120,
	"OpaqueDouble":      121,
	"NoSuchObject":      128,
	"NoSuchInstance":    129,
	"EndOfMibView":      130,
}

func (x Asn1BER) String() string {
	return proto.EnumName(Asn1BER_name, int32(x))
}

func (Asn1BER) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7dcafed58c309cd0, []int{0}
}

//
// Represents SNMP OID.
type Oid struct {
	Oid                  string   `protobuf:"bytes,1,opt,name=oid,proto3" json:"oid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Oid) Reset()         { *m = Oid{} }
func (m *Oid) String() string { return proto.CompactTextString(m) }
func (*Oid) ProtoMessage()    {}
func (*Oid) Descriptor() ([]byte, []int) {
	return fileDescriptor_7dcafed58c309cd0, []int{0}
}

func (m *Oid) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Oid.Unmarshal(m, b)
}
func (m *Oid) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Oid.Marshal(b, m, deterministic)
}
func (m *Oid) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Oid.Merge(m, src)
}
func (m *Oid) XXX_Size() int {
	return xxx_messageInfo_Oid.Size(m)
}
func (m *Oid) XXX_DiscardUnknown() {
	xxx_messageInfo_Oid.DiscardUnknown(m)
}

var xxx_messageInfo_Oid proto.InternalMessageInfo

func (m *Oid) GetOid() string {
	if m != nil {
		return m.Oid
	}
	return ""
}

//
// Represents list of SNMP Oids
type OidList struct {
	Oids                 []string `protobuf:"bytes,1,rep,name=oids,proto3" json:"oids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OidList) Reset()         { *m = OidList{} }
func (m *OidList) String() string { return proto.CompactTextString(m) }
func (*OidList) ProtoMessage()    {}
func (*OidList) Descriptor() ([]byte, []int) {
	return fileDescriptor_7dcafed58c309cd0, []int{1}
}

func (m *OidList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OidList.Unmarshal(m, b)
}
func (m *OidList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OidList.Marshal(b, m, deterministic)
}
func (m *OidList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OidList.Merge(m, src)
}
func (m *OidList) XXX_Size() int {
	return xxx_messageInfo_OidList.Size(m)
}
func (m *OidList) XXX_DiscardUnknown() {
	xxx_messageInfo_OidList.DiscardUnknown(m)
}

var xxx_messageInfo_OidList proto.InternalMessageInfo

func (m *OidList) GetOids() []string {
	if m != nil {
		return m.Oids
	}
	return nil
}

//
// Represents a single SNMP PDU
// consisting of oid, type and a value.
//
// The value is in any one of the following fields,
// determined by the type of value it stores.
type SnmpPDU struct {
	Name string  `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Type Asn1BER `protobuf:"varint,2,opt,name=Type,proto3,enum=protobuf.Asn1BER" json:"Type,omitempty"`
	// Types that are valid to be assigned to Value:
	//	*SnmpPDU_I32
	//	*SnmpPDU_I64
	//	*SnmpPDU_UI32
	//	*SnmpPDU_UI64
	//	*SnmpPDU_Str
	Value                isSnmpPDU_Value `protobuf_oneof:"Value"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *SnmpPDU) Reset()         { *m = SnmpPDU{} }
func (m *SnmpPDU) String() string { return proto.CompactTextString(m) }
func (*SnmpPDU) ProtoMessage()    {}
func (*SnmpPDU) Descriptor() ([]byte, []int) {
	return fileDescriptor_7dcafed58c309cd0, []int{2}
}

func (m *SnmpPDU) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SnmpPDU.Unmarshal(m, b)
}
func (m *SnmpPDU) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SnmpPDU.Marshal(b, m, deterministic)
}
func (m *SnmpPDU) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SnmpPDU.Merge(m, src)
}
func (m *SnmpPDU) XXX_Size() int {
	return xxx_messageInfo_SnmpPDU.Size(m)
}
func (m *SnmpPDU) XXX_DiscardUnknown() {
	xxx_messageInfo_SnmpPDU.DiscardUnknown(m)
}

var xxx_messageInfo_SnmpPDU proto.InternalMessageInfo

func (m *SnmpPDU) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SnmpPDU) GetType() Asn1BER {
	if m != nil {
		return m.Type
	}
	return Asn1BER_EndOfContents
}

type isSnmpPDU_Value interface {
	isSnmpPDU_Value()
}

type SnmpPDU_I32 struct {
	I32 int32 `protobuf:"varint,3,opt,name=I32,proto3,oneof"`
}

type SnmpPDU_I64 struct {
	I64 int64 `protobuf:"varint,4,opt,name=I64,proto3,oneof"`
}

type SnmpPDU_UI32 struct {
	UI32 uint32 `protobuf:"varint,5,opt,name=UI32,proto3,oneof"`
}

type SnmpPDU_UI64 struct {
	UI64 uint64 `protobuf:"varint,6,opt,name=UI64,proto3,oneof"`
}

type SnmpPDU_Str struct {
	Str string `protobuf:"bytes,7,opt,name=Str,proto3,oneof"`
}

func (*SnmpPDU_I32) isSnmpPDU_Value() {}

func (*SnmpPDU_I64) isSnmpPDU_Value() {}

func (*SnmpPDU_UI32) isSnmpPDU_Value() {}

func (*SnmpPDU_UI64) isSnmpPDU_Value() {}

func (*SnmpPDU_Str) isSnmpPDU_Value() {}

func (m *SnmpPDU) GetValue() isSnmpPDU_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *SnmpPDU) GetI32() int32 {
	if x, ok := m.GetValue().(*SnmpPDU_I32); ok {
		return x.I32
	}
	return 0
}

func (m *SnmpPDU) GetI64() int64 {
	if x, ok := m.GetValue().(*SnmpPDU_I64); ok {
		return x.I64
	}
	return 0
}

func (m *SnmpPDU) GetUI32() uint32 {
	if x, ok := m.GetValue().(*SnmpPDU_UI32); ok {
		return x.UI32
	}
	return 0
}

func (m *SnmpPDU) GetUI64() uint64 {
	if x, ok := m.GetValue().(*SnmpPDU_UI64); ok {
		return x.UI64
	}
	return 0
}

func (m *SnmpPDU) GetStr() string {
	if x, ok := m.GetValue().(*SnmpPDU_Str); ok {
		return x.Str
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*SnmpPDU) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*SnmpPDU_I32)(nil),
		(*SnmpPDU_I64)(nil),
		(*SnmpPDU_UI32)(nil),
		(*SnmpPDU_UI64)(nil),
		(*SnmpPDU_Str)(nil),
	}
}

//
// Represents multiple SNMP PDU
type SnmpPDUs struct {
	Pdus                 []*SnmpPDU `protobuf:"bytes,1,rep,name=pdus,proto3" json:"pdus,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *SnmpPDUs) Reset()         { *m = SnmpPDUs{} }
func (m *SnmpPDUs) String() string { return proto.CompactTextString(m) }
func (*SnmpPDUs) ProtoMessage()    {}
func (*SnmpPDUs) Descriptor() ([]byte, []int) {
	return fileDescriptor_7dcafed58c309cd0, []int{3}
}

func (m *SnmpPDUs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SnmpPDUs.Unmarshal(m, b)
}
func (m *SnmpPDUs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SnmpPDUs.Marshal(b, m, deterministic)
}
func (m *SnmpPDUs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SnmpPDUs.Merge(m, src)
}
func (m *SnmpPDUs) XXX_Size() int {
	return xxx_messageInfo_SnmpPDUs.Size(m)
}
func (m *SnmpPDUs) XXX_DiscardUnknown() {
	xxx_messageInfo_SnmpPDUs.DiscardUnknown(m)
}

var xxx_messageInfo_SnmpPDUs proto.InternalMessageInfo

func (m *SnmpPDUs) GetPdus() []*SnmpPDU {
	if m != nil {
		return m.Pdus
	}
	return nil
}

type SnmpPacket struct {
	Error                uint32     `protobuf:"varint,1,opt,name=Error,proto3" json:"Error,omitempty"`
	Variable             []*SnmpPDU `protobuf:"bytes,2,rep,name=Variable,proto3" json:"Variable,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *SnmpPacket) Reset()         { *m = SnmpPacket{} }
func (m *SnmpPacket) String() string { return proto.CompactTextString(m) }
func (*SnmpPacket) ProtoMessage()    {}
func (*SnmpPacket) Descriptor() ([]byte, []int) {
	return fileDescriptor_7dcafed58c309cd0, []int{4}
}

func (m *SnmpPacket) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SnmpPacket.Unmarshal(m, b)
}
func (m *SnmpPacket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SnmpPacket.Marshal(b, m, deterministic)
}
func (m *SnmpPacket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SnmpPacket.Merge(m, src)
}
func (m *SnmpPacket) XXX_Size() int {
	return xxx_messageInfo_SnmpPacket.Size(m)
}
func (m *SnmpPacket) XXX_DiscardUnknown() {
	xxx_messageInfo_SnmpPacket.DiscardUnknown(m)
}

var xxx_messageInfo_SnmpPacket proto.InternalMessageInfo

func (m *SnmpPacket) GetError() uint32 {
	if m != nil {
		return m.Error
	}
	return 0
}

func (m *SnmpPacket) GetVariable() []*SnmpPDU {
	if m != nil {
		return m.Variable
	}
	return nil
}

func init() {
	proto.RegisterEnum("protobuf.Asn1BER", Asn1BER_name, Asn1BER_value)
	proto.RegisterType((*Oid)(nil), "protobuf.Oid")
	proto.RegisterType((*OidList)(nil), "protobuf.OidList")
	proto.RegisterType((*SnmpPDU)(nil), "protobuf.SnmpPDU")
	proto.RegisterType((*SnmpPDUs)(nil), "protobuf.SnmpPDUs")
	proto.RegisterType((*SnmpPacket)(nil), "protobuf.SnmpPacket")
}

func init() { proto.RegisterFile("snmp.proto", fileDescriptor_7dcafed58c309cd0) }

var fileDescriptor_7dcafed58c309cd0 = []byte{
	// 613 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x52, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0xcd, 0xc6, 0x4e, 0x9c, 0x4e, 0x9b, 0xb2, 0x19, 0x82, 0x88, 0x2a, 0x21, 0x45, 0x96, 0x90,
	0x22, 0x10, 0x55, 0x9b, 0x44, 0x39, 0xd3, 0x7c, 0xb4, 0x8d, 0x04, 0x49, 0x71, 0x9a, 0x72, 0x76,
	0xe2, 0x6d, 0x59, 0xe2, 0xec, 0x9a, 0xf5, 0x5a, 0xa5, 0x37, 0xe0, 0x3f, 0xf1, 0x3b, 0xf8, 0x37,
	0x9c, 0xd1, 0xae, 0x53, 0x54, 0x68, 0x7b, 0xf2, 0xcc, 0x9b, 0x79, 0xcf, 0x6f, 0x66, 0x16, 0x20,
	0x15, 0xeb, 0x64, 0x3f, 0x51, 0x52, 0x4b, 0xac, 0xd8, 0xcf, 0x22, 0xbb, 0xf4, 0x9f, 0x83, 0x33,
	0xe5, 0x11, 0x52, 0x70, 0x24, 0x8f, 0x1a, 0xa4, 0x49, 0x5a, 0x5b, 0x81, 0x09, 0xfd, 0x17, 0xe0,
	0x4d, 0x79, 0xf4, 0x8e, 0xa7, 0x1a, 0x11, 0x5c, 0xc9, 0xa3, 0xb4, 0x41, 0x9a, 0x4e, 0x6b, 0x2b,
	0xb0, 0xb1, 0xff, 0x93, 0x80, 0x37, 0x13, 0xeb, 0xe4, 0x6c, 0x38, 0x37, 0xf5, 0x49, 0xb8, 0x66,
	0x1b, 0xb6, 0x8d, 0xf1, 0x25, 0xb8, 0xe7, 0x37, 0x09, 0x6b, 0x14, 0x9b, 0xa4, 0xb5, 0xdb, 0xae,
	0xed, 0xdf, 0xfe, 0x70, 0xff, 0x28, 0x15, 0x87, 0xfd, 0x51, 0x10, 0xd8, 0x32, 0x22, 0x38, 0xe3,
	0x4e, 0xbb, 0xe1, 0x34, 0x49, 0xab, 0x74, 0x5a, 0x08, 0x4c, 0x62, 0xb1, 0x5e, 0xb7, 0xe1, 0x36,
	0x49, 0xcb, 0xb1, 0x58, 0xaf, 0x8b, 0x75, 0x70, 0xe7, 0xa6, 0xb1, 0xd4, 0x24, 0xad, 0xea, 0x69,
	0x21, 0xb0, 0x59, 0x8e, 0xf6, 0xba, 0x8d, 0x72, 0x93, 0xb4, 0xdc, 0x1c, 0xed, 0x75, 0x0d, 0x7f,
	0xa6, 0x55, 0xc3, 0x33, 0x6e, 0x0c, 0x7f, 0xa6, 0x55, 0xdf, 0x83, 0xd2, 0x45, 0x18, 0x67, 0xcc,
	0x3f, 0x84, 0xca, 0xc6, 0x76, 0x6a, 0x3c, 0x26, 0x51, 0x96, 0xcf, 0xb5, 0x7d, 0xd7, 0xe3, 0xa6,
	0x23, 0xb0, 0x65, 0xff, 0x03, 0x80, 0x05, 0xc2, 0xe5, 0x8a, 0x69, 0xac, 0x43, 0x69, 0xa4, 0x94,
	0x54, 0x76, 0xda, 0x6a, 0x90, 0x27, 0xf8, 0x06, 0x2a, 0x17, 0xa1, 0xe2, 0xe1, 0x22, 0x36, 0x23,
	0x3f, 0x22, 0xf7, 0xb7, 0xe5, 0xd5, 0xef, 0x22, 0x78, 0x9b, 0x45, 0x60, 0x0d, 0xaa, 0x23, 0x11,
	0x4d, 0x2f, 0x07, 0x52, 0x68, 0x26, 0x74, 0x4a, 0x0b, 0xf8, 0x04, 0xb6, 0xe7, 0x62, 0x25, 0xe4,
	0xb5, 0x30, 0x4b, 0xa2, 0x05, 0xdc, 0x06, 0xaf, 0x2f, 0x65, 0xcc, 0x42, 0x41, 0x89, 0x49, 0xc6,
	0x42, 0xb3, 0x2b, 0xa6, 0x68, 0x11, 0xab, 0xb0, 0xd5, 0xe7, 0x7a, 0xa6, 0x15, 0x17, 0x57, 0xd4,
	0x31, 0xcc, 0xe9, 0x52, 0xb3, 0x5b, 0xc0, 0xc5, 0x0a, 0xb8, 0x93, 0x2c, 0x8e, 0x69, 0x09, 0xeb,
	0x40, 0xa7, 0x8b, 0xcf, 0x6c, 0xa9, 0xc7, 0x11, 0x13, 0x9a, 0x5f, 0x72, 0xa6, 0x68, 0x19, 0x9f,
	0x41, 0x2d, 0x47, 0x87, 0x2c, 0x5d, 0x2a, 0x9e, 0x68, 0x2e, 0x05, 0xf5, 0x8c, 0xec, 0xf8, 0xec,
	0x28, 0x8a, 0x14, 0x4b, 0x53, 0xfa, 0xd6, 0xa4, 0x03, 0x99, 0x09, 0xcd, 0x54, 0xa7, 0x4d, 0x8f,
	0x8c, 0x83, 0x93, 0x30, 0xbb, 0x62, 0x9d, 0x36, 0xed, 0x9b, 0xda, 0x39, 0x5f, 0xb3, 0x73, 0xbe,
	0x5c, 0xa5, 0x74, 0x80, 0x00, 0xe5, 0x69, 0x12, 0x7e, 0xc9, 0x18, 0x1d, 0x1a, 0x37, 0x93, 0x34,
	0x4c, 0x6e, 0x75, 0x46, 0x77, 0x74, 0x7a, 0x5d, 0x7a, 0x8c, 0xbb, 0x00, 0x73, 0x9e, 0x8f, 0xd2,
	0x69, 0xd3, 0x13, 0xeb, 0xde, 0x72, 0x8f, 0x63, 0x19, 0x6a, 0xfa, 0x15, 0x29, 0xec, 0xe4, 0xc0,
	0x50, 0x66, 0x8b, 0x98, 0xd1, 0x1b, 0xac, 0xc1, 0xce, 0x44, 0xce, 0xb2, 0xe5, 0xa7, 0xdc, 0x35,
	0xfd, 0x46, 0xf0, 0x29, 0xec, 0xe6, 0xd0, 0x58, 0xa4, 0x3a, 0x14, 0x4b, 0x46, 0xbf, 0x13, 0xd3,
	0x67, 0xb7, 0xfa, 0x9e, 0x2f, 0x2e, 0x38, 0xbb, 0xa6, 0x3f, 0xc8, 0x5e, 0x91, 0x92, 0xf6, 0x2f,
	0x02, 0xde, 0x40, 0xae, 0xd7, 0xa1, 0x88, 0xf0, 0x00, 0x9c, 0x13, 0xa6, 0xf1, 0xce, 0xa1, 0x36,
	0x0f, 0x7e, 0xaf, 0xfe, 0xdf, 0xed, 0xec, 0xe5, 0xfd, 0x02, 0x1e, 0x82, 0x33, 0x63, 0x1a, 0xf1,
	0xde, 0x69, 0xd3, 0x47, 0x29, 0xaf, 0xc1, 0xfd, 0x18, 0xc6, 0x2b, 0xac, 0xfe, 0xf3, 0x97, 0xbd,
	0x07, 0x24, 0xfc, 0x02, 0xb6, 0x01, 0x66, 0x5a, 0xb1, 0x70, 0xfd, 0x10, 0xe5, 0xfe, 0x83, 0xf2,
	0x0b, 0x07, 0x64, 0x51, 0xb6, 0x68, 0xe7, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x45, 0xf4, 0x0b,
	0xf2, 0xdf, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CommandClient is the client API for Command service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CommandClient interface {
	//SNMP Get given the list of OIDs
	Get(ctx context.Context, in *OidList, opts ...grpc.CallOption) (*SnmpPacket, error)
	//SNMP Set
	Set(ctx context.Context, in *SnmpPDUs, opts ...grpc.CallOption) (*SnmpPacket, error)
	//SNMP Walk and return all variables in one shot
	Walk(ctx context.Context, in *Oid, opts ...grpc.CallOption) (*SnmpPDUs, error)
	//Stream each SNMP PDU while running SNMP WALK from the given OID.
	StreamWalk(ctx context.Context, in *Oid, opts ...grpc.CallOption) (Command_StreamWalkClient, error)
}

type commandClient struct {
	cc *grpc.ClientConn
}

func NewCommandClient(cc *grpc.ClientConn) CommandClient {
	return &commandClient{cc}
}

func (c *commandClient) Get(ctx context.Context, in *OidList, opts ...grpc.CallOption) (*SnmpPacket, error) {
	out := new(SnmpPacket)
	err := c.cc.Invoke(ctx, "/protobuf.Command/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commandClient) Set(ctx context.Context, in *SnmpPDUs, opts ...grpc.CallOption) (*SnmpPacket, error) {
	out := new(SnmpPacket)
	err := c.cc.Invoke(ctx, "/protobuf.Command/Set", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commandClient) Walk(ctx context.Context, in *Oid, opts ...grpc.CallOption) (*SnmpPDUs, error) {
	out := new(SnmpPDUs)
	err := c.cc.Invoke(ctx, "/protobuf.Command/Walk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commandClient) StreamWalk(ctx context.Context, in *Oid, opts ...grpc.CallOption) (Command_StreamWalkClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Command_serviceDesc.Streams[0], "/protobuf.Command/StreamWalk", opts...)
	if err != nil {
		return nil, err
	}
	x := &commandStreamWalkClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Command_StreamWalkClient interface {
	Recv() (*SnmpPDU, error)
	grpc.ClientStream
}

type commandStreamWalkClient struct {
	grpc.ClientStream
}

func (x *commandStreamWalkClient) Recv() (*SnmpPDU, error) {
	m := new(SnmpPDU)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CommandServer is the server API for Command service.
type CommandServer interface {
	//SNMP Get given the list of OIDs
	Get(context.Context, *OidList) (*SnmpPacket, error)
	//SNMP Set
	Set(context.Context, *SnmpPDUs) (*SnmpPacket, error)
	//SNMP Walk and return all variables in one shot
	Walk(context.Context, *Oid) (*SnmpPDUs, error)
	//Stream each SNMP PDU while running SNMP WALK from the given OID.
	StreamWalk(*Oid, Command_StreamWalkServer) error
}

// UnimplementedCommandServer can be embedded to have forward compatible implementations.
type UnimplementedCommandServer struct {
}

func (*UnimplementedCommandServer) Get(ctx context.Context, req *OidList) (*SnmpPacket, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedCommandServer) Set(ctx context.Context, req *SnmpPDUs) (*SnmpPacket, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (*UnimplementedCommandServer) Walk(ctx context.Context, req *Oid) (*SnmpPDUs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Walk not implemented")
}
func (*UnimplementedCommandServer) StreamWalk(req *Oid, srv Command_StreamWalkServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamWalk not implemented")
}

func RegisterCommandServer(s *grpc.Server, srv CommandServer) {
	s.RegisterService(&_Command_serviceDesc, srv)
}

func _Command_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OidList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommandServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.Command/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommandServer).Get(ctx, req.(*OidList))
	}
	return interceptor(ctx, in, info, handler)
}

func _Command_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SnmpPDUs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommandServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.Command/Set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommandServer).Set(ctx, req.(*SnmpPDUs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Command_Walk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Oid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommandServer).Walk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.Command/Walk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommandServer).Walk(ctx, req.(*Oid))
	}
	return interceptor(ctx, in, info, handler)
}

func _Command_StreamWalk_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Oid)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CommandServer).StreamWalk(m, &commandStreamWalkServer{stream})
}

type Command_StreamWalkServer interface {
	Send(*SnmpPDU) error
	grpc.ServerStream
}

type commandStreamWalkServer struct {
	grpc.ServerStream
}

func (x *commandStreamWalkServer) Send(m *SnmpPDU) error {
	return x.ServerStream.SendMsg(m)
}

var _Command_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf.Command",
	HandlerType: (*CommandServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _Command_Get_Handler,
		},
		{
			MethodName: "Set",
			Handler:    _Command_Set_Handler,
		},
		{
			MethodName: "Walk",
			Handler:    _Command_Walk_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamWalk",
			Handler:       _Command_StreamWalk_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "snmp.proto",
}
